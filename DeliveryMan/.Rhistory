return(car)
}
getInit<-function(Node){
if(length(Node$Pn)!=0){
if(Node$Pn!=0){return(getInit(Node$Pn))}
}
return(Node$Nm)
}
rekurs<-function(Node,roads,Gx,Gy){
return(getNext(Node$x,Node$y,Gx,Gy,roads,Node))
}
runDeliveryMan(astarDM)
#' Run Delivery Man
#'
#' Runs the delivery man game. In this game, deliveries are randomly placed on a city grid. You
#' must pick up and deliver the deliveries as fast as possible under changing traffic conditions.
#' Your score is the time it takes for you to complete this task. To play manually pass manualDM
#' as the carReady function and enter the number pad direction numbers to make moves.
#' @param carReady Your function that takes three arguments: (1) a list of two matrices giving the
#' traffice conditions. The first matrix is named 'hroads' and gives a matrix of traffice conditions
#' on the horizontal roads. The second matrix is named 'vroads' and gives a matrix of traffic
#' conditional on the vertical roads. (2) a list providing information about your car. This
#' list includes the x and y coordinates of the car with names 'x' and 'y', the package the car
#' is carrying, with name 'load' (this is 0 if no package is being carried), a list called
#' 'mem' that you can use to store information you want to remember from turn to turn, and
#' a field called nextMove where you will write what you want the car to do. Moves are
#' specified as on the number-pad (2 down, 4 left, 6 right, 8 up, 5 stay still). (3) A
#' matrix containing information about the packages. This contains five columns and a row for each
#' package. The first two columns give x and y coordinates about where the package should be picked
#' up from. The next two columns give x and y coordinates about where the package should be
#' delivered to. The final column specifies the package status (0 is not picked up, 1 is picked up but not delivered, 2 is delivered).
#' Your function should return the car object with the nextMove specified.
#' @param dim The dimension of the board. You will be scored on a board of dimension 10.
#' @param turns The number of turns the game should go for if deliveries are not made. Ignore this
#' except for noting that the default is 2000 so if you have not made deliveries after 2000 turns
#' you fail.
#' @param pause The pause period between moves. Ignore this.
#' @param del The number of deliveries. You will be scored on a board with 5 deliveries.
#' @return A string describing the outcome of the game.
#' @export
#'
hValue<-function(x,y,Gx,Gy){ #get h-value (Gy/Gx = goal)
hx=x-Gx
if(hx<0){hx=hx*-1}
hy=y-Gy
if(hy<0){hy=hy*-1}
return(hx+hy)
}
getNode<-function(x,y,h,g,Nm,Pn){
return(node=list("x"=x,"y"=y,"h"=h,"g"=g,"Nm"=Nm,"Pn"=Pn))
}
getNext<-function(x,y,Gx,Gy,roads,Pn){ #get neighburs
if(x==1){
ways = list(getNode(x+1,y,hValue(x+1,y,Gx,Gy),roads$hroads[y,x+1],6,Pn))
}else{
if(x==10){
ways = list(getNode(x-1,y,hValue(x-1,y,Gx,Gy),roads$hroads[y,x-1],4,Pn))
}else{
ways = list(getNode(x-1,y,hValue(x-1,y,Gx,Gy),roads$hroads[y,x-1],4,Pn),getNode(x+1,y,hValue(x+1,y,Gx,Gy),roads$hroads[y,x+1],6,Pn))
}
}
if(y==1){
ways = c(ways,list(getNode(x,y+1,hValue(x,y+1,Gx,Gy),roads$vroads[y+1,x],8,Pn)))
}else{
if(y==10){
ways = c(ways,list(getNode(x,y-1,hValue(x,y-1,Gx,Gy),roads$vroads[y-1,x],2,Pn)))
}else{
ways = c(ways,list(getNode(x,y-1,hValue(x,y-1,Gx,Gy),roads$vroads[y-1,x],2,Pn),getNode(x,y+1,hValue(x,y+1,Gx,Gy),roads$vroads[y+1,x],8,Pn)))
}
}
return(ways) # return [x,y,(h)hValue,(g)wayCost]
}
isFound<-function(Noder,Gx,Gy){
if(length(Noder)!=0){
for(i in 1:length(Noder)){
if(Gx==data.frame(Noder[i])$x){
if(Gy==data.frame(Noder[i])$y){
#return(TRUE)
return(data.frame(Noder[i]))
}
}
}
}
return(FALSE)
}
predCost<-function(Node){
if(length(Node$Pn)!=0){
if(Node$Pn!=0){return(predCost(Node$Pn))}
}
return(Node$g)
}
astarDM=function(roads,car,packages){
Gx=packages[1,1]
Gy=packages[1,2]
curX=car$x
curY=car$y
tmp <- getNext(car$x,car$y,Gx,Gy,roads,0)
nextLoc=0 #data.frame(tmp[1])
repeat{
locMax=100
Index=1
if(length(tmp)!=0){
for(i in 1:length(tmp)){
#if((data.frame(tmp[i])$h+data.frame(tmp[i])$g)<locMax){ #kolla också föregående Gs
if((predCost(tmp[i]))+data.frame(tmp[i])$h)<locMax){
nextLoc=data.frame(tmp[i])
locMax=(data.frame(tmp[i])$h+data.frame(tmp[i])$g)
Index=i
}
}
}
tmp=c(tmp,rekurs(nextLoc,roads,Gx,Gy))
#winner=isFound(tmp,Gx,Gy)
winner=FALSE
if(Gx==nextLoc$x){
if(Gy==nextLoc$y){
winner=nextLoc
}
}
if(winner!=FALSE){
car$nextMove=getInit(winner)
break
}
tmp[Index]<-NULL
}
return(car)
}
getInit<-function(Node){
if(length(Node$Pn)!=0){
if(Node$Pn!=0){return(getInit(Node$Pn))}
}
return(Node$Nm)
}
rekurs<-function(Node,roads,Gx,Gy){
return(getNext(Node$x,Node$y,Gx,Gy,roads,Node))
}
runDeliveryMan(astarDM)
#' Run Delivery Man
#'
#' Runs the delivery man game. In this game, deliveries are randomly placed on a city grid. You
#' must pick up and deliver the deliveries as fast as possible under changing traffic conditions.
#' Your score is the time it takes for you to complete this task. To play manually pass manualDM
#' as the carReady function and enter the number pad direction numbers to make moves.
#' @param carReady Your function that takes three arguments: (1) a list of two matrices giving the
#' traffice conditions. The first matrix is named 'hroads' and gives a matrix of traffice conditions
#' on the horizontal roads. The second matrix is named 'vroads' and gives a matrix of traffic
#' conditional on the vertical roads. (2) a list providing information about your car. This
#' list includes the x and y coordinates of the car with names 'x' and 'y', the package the car
#' is carrying, with name 'load' (this is 0 if no package is being carried), a list called
#' 'mem' that you can use to store information you want to remember from turn to turn, and
#' a field called nextMove where you will write what you want the car to do. Moves are
#' specified as on the number-pad (2 down, 4 left, 6 right, 8 up, 5 stay still). (3) A
#' matrix containing information about the packages. This contains five columns and a row for each
#' package. The first two columns give x and y coordinates about where the package should be picked
#' up from. The next two columns give x and y coordinates about where the package should be
#' delivered to. The final column specifies the package status (0 is not picked up, 1 is picked up but not delivered, 2 is delivered).
#' Your function should return the car object with the nextMove specified.
#' @param dim The dimension of the board. You will be scored on a board of dimension 10.
#' @param turns The number of turns the game should go for if deliveries are not made. Ignore this
#' except for noting that the default is 2000 so if you have not made deliveries after 2000 turns
#' you fail.
#' @param pause The pause period between moves. Ignore this.
#' @param del The number of deliveries. You will be scored on a board with 5 deliveries.
#' @return A string describing the outcome of the game.
#' @export
#'
hValue<-function(x,y,Gx,Gy){ #get h-value (Gy/Gx = goal)
hx=x-Gx
if(hx<0){hx=hx*-1}
hy=y-Gy
if(hy<0){hy=hy*-1}
return(hx+hy)
}
getNode<-function(x,y,h,g,Nm,Pn){
return(node=list("x"=x,"y"=y,"h"=h,"g"=g,"Nm"=Nm,"Pn"=Pn))
}
getNext<-function(x,y,Gx,Gy,roads,Pn){ #get neighburs
if(x==1){
ways = list(getNode(x+1,y,hValue(x+1,y,Gx,Gy),roads$hroads[y,x+1],6,Pn))
}else{
if(x==10){
ways = list(getNode(x-1,y,hValue(x-1,y,Gx,Gy),roads$hroads[y,x-1],4,Pn))
}else{
ways = list(getNode(x-1,y,hValue(x-1,y,Gx,Gy),roads$hroads[y,x-1],4,Pn),getNode(x+1,y,hValue(x+1,y,Gx,Gy),roads$hroads[y,x+1],6,Pn))
}
}
if(y==1){
ways = c(ways,list(getNode(x,y+1,hValue(x,y+1,Gx,Gy),roads$vroads[y+1,x],8,Pn)))
}else{
if(y==10){
ways = c(ways,list(getNode(x,y-1,hValue(x,y-1,Gx,Gy),roads$vroads[y-1,x],2,Pn)))
}else{
ways = c(ways,list(getNode(x,y-1,hValue(x,y-1,Gx,Gy),roads$vroads[y-1,x],2,Pn),getNode(x,y+1,hValue(x,y+1,Gx,Gy),roads$vroads[y+1,x],8,Pn)))
}
}
return(ways) # return [x,y,(h)hValue,(g)wayCost]
}
isFound<-function(Noder,Gx,Gy){
if(length(Noder)!=0){
for(i in 1:length(Noder)){
if(Gx==data.frame(Noder[i])$x){
if(Gy==data.frame(Noder[i])$y){
#return(TRUE)
return(data.frame(Noder[i]))
}
}
}
}
return(FALSE)
}
predCost<-function(Node){
if(length(Node$Pn)!=0){
if(Node$Pn!=0){return(predCost(Node$Pn))}
}
return(Node$g)
}
astarDM=function(roads,car,packages){
Gx=packages[1,1]
Gy=packages[1,2]
curX=car$x
curY=car$y
tmp <- getNext(car$x,car$y,Gx,Gy,roads,0)
nextLoc=0 #data.frame(tmp[1])
repeat{
locMax=100
Index=1
if(length(tmp)!=0){
for(i in 1:length(tmp)){
#if((data.frame(tmp[i])$h+data.frame(tmp[i])$g)<locMax){ #kolla också föregående Gs
if((predCost(tmp[i]))+data.frame(tmp[i])$h)<locMax){
nextLoc=data.frame(tmp[i])
locMax=(data.frame(tmp[i])$h+data.frame(tmp[i])$g)
Index=i
}
}
}
tmp=c(tmp,rekurs(nextLoc,roads,Gx,Gy))
#winner=isFound(tmp,Gx,Gy)
winner=FALSE
if(Gx==nextLoc$x){
if(Gy==nextLoc$y){
winner=nextLoc
}
}
if(winner!=FALSE){
car$nextMove=getInit(winner)
break
}
tmp[Index]<-NULL
}
return(car)
}
getInit<-function(Node){
if(length(Node$Pn)!=0){
if(Node$Pn!=0){return(getInit(Node$Pn))}
}
return(Node$Nm)
}
rekurs<-function(Node,roads,Gx,Gy){
return(getNext(Node$x,Node$y,Gx,Gy,roads,Node))
}
runDeliveryMan(astarDM)
#' Run Delivery Man
#'
#' Runs the delivery man game. In this game, deliveries are randomly placed on a city grid. You
#' must pick up and deliver the deliveries as fast as possible under changing traffic conditions.
#' Your score is the time it takes for you to complete this task. To play manually pass manualDM
#' as the carReady function and enter the number pad direction numbers to make moves.
#' @param carReady Your function that takes three arguments: (1) a list of two matrices giving the
#' traffice conditions. The first matrix is named 'hroads' and gives a matrix of traffice conditions
#' on the horizontal roads. The second matrix is named 'vroads' and gives a matrix of traffic
#' conditional on the vertical roads. (2) a list providing information about your car. This
#' list includes the x and y coordinates of the car with names 'x' and 'y', the package the car
#' is carrying, with name 'load' (this is 0 if no package is being carried), a list called
#' 'mem' that you can use to store information you want to remember from turn to turn, and
#' a field called nextMove where you will write what you want the car to do. Moves are
#' specified as on the number-pad (2 down, 4 left, 6 right, 8 up, 5 stay still). (3) A
#' matrix containing information about the packages. This contains five columns and a row for each
#' package. The first two columns give x and y coordinates about where the package should be picked
#' up from. The next two columns give x and y coordinates about where the package should be
#' delivered to. The final column specifies the package status (0 is not picked up, 1 is picked up but not delivered, 2 is delivered).
#' Your function should return the car object with the nextMove specified.
#' @param dim The dimension of the board. You will be scored on a board of dimension 10.
#' @param turns The number of turns the game should go for if deliveries are not made. Ignore this
#' except for noting that the default is 2000 so if you have not made deliveries after 2000 turns
#' you fail.
#' @param pause The pause period between moves. Ignore this.
#' @param del The number of deliveries. You will be scored on a board with 5 deliveries.
#' @return A string describing the outcome of the game.
#' @export
#'
hValue<-function(x,y,Gx,Gy){ #get h-value (Gy/Gx = goal)
hx=x-Gx
if(hx<0){hx=hx*-1}
hy=y-Gy
if(hy<0){hy=hy*-1}
return(hx+hy)
}
getNode<-function(x,y,h,g,Nm,Pn){
return(node=list("x"=x,"y"=y,"h"=h,"g"=g,"Nm"=Nm,"Pn"=Pn))
}
getNext<-function(x,y,Gx,Gy,roads,Pn){ #get neighburs
if(x==1){
ways = list(getNode(x+1,y,hValue(x+1,y,Gx,Gy),roads$hroads[y,x+1],6,Pn))
}else{
if(x==10){
ways = list(getNode(x-1,y,hValue(x-1,y,Gx,Gy),roads$hroads[y,x-1],4,Pn))
}else{
ways = list(getNode(x-1,y,hValue(x-1,y,Gx,Gy),roads$hroads[y,x-1],4,Pn),getNode(x+1,y,hValue(x+1,y,Gx,Gy),roads$hroads[y,x+1],6,Pn))
}
}
if(y==1){
ways = c(ways,list(getNode(x,y+1,hValue(x,y+1,Gx,Gy),roads$vroads[y+1,x],8,Pn)))
}else{
if(y==10){
ways = c(ways,list(getNode(x,y-1,hValue(x,y-1,Gx,Gy),roads$vroads[y-1,x],2,Pn)))
}else{
ways = c(ways,list(getNode(x,y-1,hValue(x,y-1,Gx,Gy),roads$vroads[y-1,x],2,Pn),getNode(x,y+1,hValue(x,y+1,Gx,Gy),roads$vroads[y+1,x],8,Pn)))
}
}
return(ways) # return [x,y,(h)hValue,(g)wayCost]
}
isFound<-function(Noder,Gx,Gy){
if(length(Noder)!=0){
for(i in 1:length(Noder)){
if(Gx==data.frame(Noder[i])$x){
if(Gy==data.frame(Noder[i])$y){
#return(TRUE)
return(data.frame(Noder[i]))
}
}
}
}
return(FALSE)
}
predCost<-function(Node){
if(length(Node$Pn)!=0){
if(Node$Pn!=0){return(predCost(Node$Pn))}
}
return(Node$g)
}
astarDM=function(roads,car,packages){
Gx=packages[1,1]
Gy=packages[1,2]
curX=car$x
curY=car$y
tmp <- getNext(car$x,car$y,Gx,Gy,roads,0)
nextLoc=0 #data.frame(tmp[1])
repeat{
locMax=100
Index=1
if(length(tmp)!=0){
for(i in 1:length(tmp)){
#if((data.frame(tmp[i])$h+data.frame(tmp[i])$g)<locMax){ #kolla också föregående Gs
if((predCost(tmp[i]))+data.frame(tmp[i])$h)<locMax){
nextLoc=data.frame(tmp[i])
locMax=(data.frame(tmp[i])$h+data.frame(tmp[i])$g)
Index=i
}
}
}
tmp=c(tmp,rekurs(nextLoc,roads,Gx,Gy))
#winner=isFound(tmp,Gx,Gy)
winner=FALSE
if(Gx==nextLoc$x){
if(Gy==nextLoc$y){
winner=nextLoc
}
}
if(winner!=FALSE){
car$nextMove=getInit(winner)
break
}
tmp[Index]<-NULL
}
return(car)
}
getInit<-function(Node){
if(length(Node$Pn)!=0){
if(Node$Pn!=0){return(getInit(Node$Pn))}
}
return(Node$Nm)
}
rekurs<-function(Node,roads,Gx,Gy){
return(getNext(Node$x,Node$y,Gx,Gy,roads,Node))
}
runDeliveryMan(astarDM)
#' Run Delivery Man
#'
#' Runs the delivery man game. In this game, deliveries are randomly placed on a city grid. You
#' must pick up and deliver the deliveries as fast as possible under changing traffic conditions.
#' Your score is the time it takes for you to complete this task. To play manually pass manualDM
#' as the carReady function and enter the number pad direction numbers to make moves.
#' @param carReady Your function that takes three arguments: (1) a list of two matrices giving the
#' traffice conditions. The first matrix is named 'hroads' and gives a matrix of traffice conditions
#' on the horizontal roads. The second matrix is named 'vroads' and gives a matrix of traffic
#' conditional on the vertical roads. (2) a list providing information about your car. This
#' list includes the x and y coordinates of the car with names 'x' and 'y', the package the car
#' is carrying, with name 'load' (this is 0 if no package is being carried), a list called
#' 'mem' that you can use to store information you want to remember from turn to turn, and
#' a field called nextMove where you will write what you want the car to do. Moves are
#' specified as on the number-pad (2 down, 4 left, 6 right, 8 up, 5 stay still). (3) A
#' matrix containing information about the packages. This contains five columns and a row for each
#' package. The first two columns give x and y coordinates about where the package should be picked
#' up from. The next two columns give x and y coordinates about where the package should be
#' delivered to. The final column specifies the package status (0 is not picked up, 1 is picked up but not delivered, 2 is delivered).
#' Your function should return the car object with the nextMove specified.
#' @param dim The dimension of the board. You will be scored on a board of dimension 10.
#' @param turns The number of turns the game should go for if deliveries are not made. Ignore this
#' except for noting that the default is 2000 so if you have not made deliveries after 2000 turns
#' you fail.
#' @param pause The pause period between moves. Ignore this.
#' @param del The number of deliveries. You will be scored on a board with 5 deliveries.
#' @return A string describing the outcome of the game.
#' @export
#'
hValue<-function(x,y,Gx,Gy){ #get h-value (Gy/Gx = goal)
hx=x-Gx
if(hx<0){hx=hx*-1}
hy=y-Gy
if(hy<0){hy=hy*-1}
return(hx+hy)
}
getNode<-function(x,y,h,g,Nm,Pn){
return(node=list("x"=x,"y"=y,"h"=h,"g"=g,"Nm"=Nm,"Pn"=Pn))
}
getNext<-function(x,y,Gx,Gy,roads,Pn){ #get neighburs
if(x==1){
ways = list(getNode(x+1,y,hValue(x+1,y,Gx,Gy),roads$hroads[y,x+1],6,Pn))
}else{
if(x==10){
ways = list(getNode(x-1,y,hValue(x-1,y,Gx,Gy),roads$hroads[y,x-1],4,Pn))
}else{
ways = list(getNode(x-1,y,hValue(x-1,y,Gx,Gy),roads$hroads[y,x-1],4,Pn),getNode(x+1,y,hValue(x+1,y,Gx,Gy),roads$hroads[y,x+1],6,Pn))
}
}
if(y==1){
ways = c(ways,list(getNode(x,y+1,hValue(x,y+1,Gx,Gy),roads$vroads[y+1,x],8,Pn)))
}else{
if(y==10){
ways = c(ways,list(getNode(x,y-1,hValue(x,y-1,Gx,Gy),roads$vroads[y-1,x],2,Pn)))
}else{
ways = c(ways,list(getNode(x,y-1,hValue(x,y-1,Gx,Gy),roads$vroads[y-1,x],2,Pn),getNode(x,y+1,hValue(x,y+1,Gx,Gy),roads$vroads[y+1,x],8,Pn)))
}
}
return(ways) # return [x,y,(h)hValue,(g)wayCost]
}
isFound<-function(Noder,Gx,Gy){
if(length(Noder)!=0){
for(i in 1:length(Noder)){
if(Gx==data.frame(Noder[i])$x){
if(Gy==data.frame(Noder[i])$y){
#return(TRUE)
return(data.frame(Noder[i]))
}
}
}
}
return(FALSE)
}
predCost<-function(Node){
if(length(Node$Pn)!=0){
if(Node$Pn!=0){return(predCost(Node$Pn))}
}
return(Node$g)
}
astarDM=function(roads,car,packages){
Gx=packages[1,1]
Gy=packages[1,2]
curX=car$x
curY=car$y
tmp <- getNext(car$x,car$y,Gx,Gy,roads,0)
nextLoc=0 #data.frame(tmp[1])
repeat{
locMax=100
Index=1
if(length(tmp)!=0){
for(i in 1:length(tmp)){
#if((data.frame(tmp[i])$h+data.frame(tmp[i])$g)<locMax){ #kolla också föregående Gs
if((predCost(tmp[i]))+data.frame(tmp[i])$h)<locMax){
nextLoc=data.frame(tmp[i])
locMax=(data.frame(tmp[i])$h+data.frame(tmp[i])$g)
Index=i
}
}
}
tmp=c(tmp,rekurs(nextLoc,roads,Gx,Gy))
#winner=isFound(tmp,Gx,Gy)
winner=FALSE
if(Gx==nextLoc$x){
if(Gy==nextLoc$y){
winner=nextLoc
}
}
if(winner!=FALSE){
car$nextMove=getInit(winner)
break
}
tmp[Index]<-NULL
}
return(car)
}
getInit<-function(Node){
if(length(Node$Pn)!=0){
if(Node$Pn!=0){return(getInit(Node$Pn))}
}
return(Node$Nm)
}
rekurs<-function(Node,roads,Gx,Gy){
return(getNext(Node$x,Node$y,Gx,Gy,roads,Node))
}
runDeliveryMan(astarDM)
